=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SamplifyAPIClient
  class ProjectReportData
    # Calculated median length of interview from actual panelists
    attr_accessor :actual_median_loi

    # Total number of panelists that entered the project
    attr_accessor :attempts

    # Total number of panelists that completed the project
    attr_accessor :completes

    # Total number of panelists that refused to complete the project
    attr_accessor :completes_refused

    # Ratio of completes over attempts. (ranges from 0-1)
    attr_accessor :conversion

    # Currency ISO code
    attr_accessor :currency

    # Total estimated cost
    attr_accessor :estimated_cost

    # A unique identifier for your project
    attr_accessor :ext_project_id

    # Total number of panelists that dropped the project
    attr_accessor :incompletes

    # Total incurred cost
    attr_accessor :incurred_cost

    attr_accessor :line_items

    # Total number of panelists that triggered an overquota for the project
    attr_accessor :overquotas

    # Total remaining completes for the project
    attr_accessor :remaining_completes

    # Total number of panelists that got screened out of the project
    attr_accessor :screenouts

    # The current state of the project: PROVISIONED, LAUNCHED, PAUSED, CLOSED
    attr_accessor :state

    # Project Title
    attr_accessor :title

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actual_median_loi' => :'actualMedianLOI',
        :'attempts' => :'attempts',
        :'completes' => :'completes',
        :'completes_refused' => :'completesRefused',
        :'conversion' => :'conversion',
        :'currency' => :'currency',
        :'estimated_cost' => :'estimatedCost',
        :'ext_project_id' => :'extProjectId',
        :'incompletes' => :'incompletes',
        :'incurred_cost' => :'incurredCost',
        :'line_items' => :'lineItems',
        :'overquotas' => :'overquotas',
        :'remaining_completes' => :'remainingCompletes',
        :'screenouts' => :'screenouts',
        :'state' => :'state',
        :'title' => :'title'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'actual_median_loi' => :'Integer',
        :'attempts' => :'Integer',
        :'completes' => :'Integer',
        :'completes_refused' => :'Integer',
        :'conversion' => :'Float',
        :'currency' => :'String',
        :'estimated_cost' => :'Float',
        :'ext_project_id' => :'String',
        :'incompletes' => :'Integer',
        :'incurred_cost' => :'Float',
        :'line_items' => :'Array<LineItemReportData>',
        :'overquotas' => :'Integer',
        :'remaining_completes' => :'Integer',
        :'screenouts' => :'Integer',
        :'state' => :'String',
        :'title' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'actualMedianLOI')
        self.actual_median_loi = attributes[:'actualMedianLOI']
      end

      if attributes.has_key?(:'attempts')
        self.attempts = attributes[:'attempts']
      end

      if attributes.has_key?(:'completes')
        self.completes = attributes[:'completes']
      end

      if attributes.has_key?(:'completesRefused')
        self.completes_refused = attributes[:'completesRefused']
      end

      if attributes.has_key?(:'conversion')
        self.conversion = attributes[:'conversion']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'estimatedCost')
        self.estimated_cost = attributes[:'estimatedCost']
      end

      if attributes.has_key?(:'extProjectId')
        self.ext_project_id = attributes[:'extProjectId']
      end

      if attributes.has_key?(:'incompletes')
        self.incompletes = attributes[:'incompletes']
      end

      if attributes.has_key?(:'incurredCost')
        self.incurred_cost = attributes[:'incurredCost']
      end

      if attributes.has_key?(:'lineItems')
        if (value = attributes[:'lineItems']).is_a?(Array)
          self.line_items = value
        end
      end

      if attributes.has_key?(:'overquotas')
        self.overquotas = attributes[:'overquotas']
      end

      if attributes.has_key?(:'remainingCompletes')
        self.remaining_completes = attributes[:'remainingCompletes']
      end

      if attributes.has_key?(:'screenouts')
        self.screenouts = attributes[:'screenouts']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @actual_median_loi.nil?
        invalid_properties.push('invalid value for "actual_median_loi", actual_median_loi cannot be nil.')
      end

      if @attempts.nil?
        invalid_properties.push('invalid value for "attempts", attempts cannot be nil.')
      end

      if @completes.nil?
        invalid_properties.push('invalid value for "completes", completes cannot be nil.')
      end

      if @completes_refused.nil?
        invalid_properties.push('invalid value for "completes_refused", completes_refused cannot be nil.')
      end

      if @conversion.nil?
        invalid_properties.push('invalid value for "conversion", conversion cannot be nil.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @estimated_cost.nil?
        invalid_properties.push('invalid value for "estimated_cost", estimated_cost cannot be nil.')
      end

      if @ext_project_id.nil?
        invalid_properties.push('invalid value for "ext_project_id", ext_project_id cannot be nil.')
      end

      if @incompletes.nil?
        invalid_properties.push('invalid value for "incompletes", incompletes cannot be nil.')
      end

      if @incurred_cost.nil?
        invalid_properties.push('invalid value for "incurred_cost", incurred_cost cannot be nil.')
      end

      if @overquotas.nil?
        invalid_properties.push('invalid value for "overquotas", overquotas cannot be nil.')
      end

      if @remaining_completes.nil?
        invalid_properties.push('invalid value for "remaining_completes", remaining_completes cannot be nil.')
      end

      if @screenouts.nil?
        invalid_properties.push('invalid value for "screenouts", screenouts cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @actual_median_loi.nil?
      return false if @attempts.nil?
      return false if @completes.nil?
      return false if @completes_refused.nil?
      return false if @conversion.nil?
      return false if @currency.nil?
      return false if @estimated_cost.nil?
      return false if @ext_project_id.nil?
      return false if @incompletes.nil?
      return false if @incurred_cost.nil?
      return false if @overquotas.nil?
      return false if @remaining_completes.nil?
      return false if @screenouts.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ['PROVISIONED', 'LAUNCHED', 'CLOSED', 'INVOICED', 'COMPLETED', 'CANCELLED'])
      return false unless state_validator.valid?(@state)
      return false if @title.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['PROVISIONED', 'LAUNCHED', 'CLOSED', 'INVOICED', 'COMPLETED', 'CANCELLED'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actual_median_loi == o.actual_median_loi &&
          attempts == o.attempts &&
          completes == o.completes &&
          completes_refused == o.completes_refused &&
          conversion == o.conversion &&
          currency == o.currency &&
          estimated_cost == o.estimated_cost &&
          ext_project_id == o.ext_project_id &&
          incompletes == o.incompletes &&
          incurred_cost == o.incurred_cost &&
          line_items == o.line_items &&
          overquotas == o.overquotas &&
          remaining_completes == o.remaining_completes &&
          screenouts == o.screenouts &&
          state == o.state &&
          title == o.title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [actual_median_loi, attempts, completes, completes_refused, conversion, currency, estimated_cost, ext_project_id, incompletes, incurred_cost, line_items, overquotas, remaining_completes, screenouts, state, title].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SamplifyAPIClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end

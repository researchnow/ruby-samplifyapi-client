=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SamplifyAPIClient
  class AttributeData
    attr_accessor :category

    # List of mutually exclusive attribute Ids
    attr_accessor :exclusions

    # Attribute extra metadata
    attr_accessor :extras

    # Regex for validation
    attr_accessor :format

    # Unique attribute ID
    attr_accessor :id

    # Is allowed in filters
    attr_accessor :is_allowed_in_filters

    # Is allowed in quotas
    attr_accessor :is_allowed_in_quotas

    # Localized attribute text
    attr_accessor :localized_text

    # Attribute name
    attr_accessor :name

    attr_accessor :options

    # Attribute state
    attr_accessor :state

    # Attribute text
    attr_accessor :text

    # Attribute pricing tier
    attr_accessor :tier

    # Attribute type
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'category' => :'category',
        :'exclusions' => :'exclusions',
        :'extras' => :'extras',
        :'format' => :'format',
        :'id' => :'id',
        :'is_allowed_in_filters' => :'isAllowedInFilters',
        :'is_allowed_in_quotas' => :'isAllowedInQuotas',
        :'localized_text' => :'localizedText',
        :'name' => :'name',
        :'options' => :'options',
        :'state' => :'state',
        :'text' => :'text',
        :'tier' => :'tier',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'category' => :'AttributeCategory',
        :'exclusions' => :'Array<String>',
        :'extras' => :'Object',
        :'format' => :'String',
        :'id' => :'String',
        :'is_allowed_in_filters' => :'BOOLEAN',
        :'is_allowed_in_quotas' => :'BOOLEAN',
        :'localized_text' => :'String',
        :'name' => :'String',
        :'options' => :'Array<AttributeOption>',
        :'state' => :'String',
        :'text' => :'String',
        :'tier' => :'String',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'exclusions')
        if (value = attributes[:'exclusions']).is_a?(Array)
          self.exclusions = value
        end
      end

      if attributes.has_key?(:'extras')
        self.extras = attributes[:'extras']
      end

      if attributes.has_key?(:'format')
        self.format = attributes[:'format']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'isAllowedInFilters')
        self.is_allowed_in_filters = attributes[:'isAllowedInFilters']
      end

      if attributes.has_key?(:'isAllowedInQuotas')
        self.is_allowed_in_quotas = attributes[:'isAllowedInQuotas']
      end

      if attributes.has_key?(:'localizedText')
        self.localized_text = attributes[:'localizedText']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'options')
        if (value = attributes[:'options']).is_a?(Array)
          self.options = value
        end
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.has_key?(:'tier')
        self.tier = attributes[:'tier']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @is_allowed_in_filters.nil?
        invalid_properties.push('invalid value for "is_allowed_in_filters", is_allowed_in_filters cannot be nil.')
      end

      if @is_allowed_in_quotas.nil?
        invalid_properties.push('invalid value for "is_allowed_in_quotas", is_allowed_in_quotas cannot be nil.')
      end

      if @localized_text.nil?
        invalid_properties.push('invalid value for "localized_text", localized_text cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @text.nil?
        invalid_properties.push('invalid value for "text", text cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @is_allowed_in_filters.nil?
      return false if @is_allowed_in_quotas.nil?
      return false if @localized_text.nil?
      return false if @name.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ['ACTIVE', 'DEPRECATED', 'INACTIVE'])
      return false unless state_validator.valid?(@state)
      return false if @text.nil?
      tier_validator = EnumAttributeValidator.new('String', ['STANDARD', 'PREMIUM'])
      return false unless tier_validator.valid?(@tier)
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['LIST', 'INTEGER', 'STRING', 'INTEGER_RANGE'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['ACTIVE', 'DEPRECATED', 'INACTIVE'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tier Object to be assigned
    def tier=(tier)
      validator = EnumAttributeValidator.new('String', ['STANDARD', 'PREMIUM'])
      unless validator.valid?(tier)
        fail ArgumentError, 'invalid value for "tier", must be one of #{validator.allowable_values}.'
      end
      @tier = tier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['LIST', 'INTEGER', 'STRING', 'INTEGER_RANGE'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          category == o.category &&
          exclusions == o.exclusions &&
          extras == o.extras &&
          format == o.format &&
          id == o.id &&
          is_allowed_in_filters == o.is_allowed_in_filters &&
          is_allowed_in_quotas == o.is_allowed_in_quotas &&
          localized_text == o.localized_text &&
          name == o.name &&
          options == o.options &&
          state == o.state &&
          text == o.text &&
          tier == o.tier &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [category, exclusions, extras, format, id, is_allowed_in_filters, is_allowed_in_quotas, localized_text, name, options, state, text, tier, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SamplifyAPIClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

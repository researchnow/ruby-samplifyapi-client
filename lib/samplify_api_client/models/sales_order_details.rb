=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SamplifyAPIClient
  class SalesOrderDetails
    # costPerInterview
    attr_accessor :cost_per_interview

    # costPerInterviewWithCurrency
    attr_accessor :cost_per_interview_with_currency

    # countryIsoCode
    attr_accessor :country_iso_code

    # extendedamount
    attr_accessor :extendedamount

    # guid
    attr_accessor :guid

    # labelForMobile
    attr_accessor :label_for_mobile

    # productIdGuid
    attr_accessor :product_id_guid

    # productIdName
    attr_accessor :product_id_name

    # quantity
    attr_accessor :quantity

    # ssiAdditionalPoints
    attr_accessor :ssi_additional_points

    # ssiCalculatedIr
    attr_accessor :ssi_calculated_ir

    # ssiCalculatedLoi
    attr_accessor :ssi_calculated_loi

    # ssiChartsNum
    attr_accessor :ssi_charts_num

    # ssiFamilyId
    attr_accessor :ssi_family_id

    # ssiImagesNum
    attr_accessor :ssi_images_num

    # ssiImagesSpecialNum
    attr_accessor :ssi_images_special_num

    # ssiInputPrice
    attr_accessor :ssi_input_price

    # ssiIr
    attr_accessor :ssi_ir

    # ssiLabel
    attr_accessor :ssi_label

    # ssiProductType
    attr_accessor :ssi_product_type

    # ssiProductTypeId
    attr_accessor :ssi_product_type_id

    # ssiSampleCountryCode
    attr_accessor :ssi_sample_country_code

    # ssiSampleCountryId
    attr_accessor :ssi_sample_country_id

    # ssiTitle
    attr_accessor :ssi_title

    # ssiVendorUsed
    attr_accessor :ssi_vendor_used

    # ssiVideosNum
    attr_accessor :ssi_videos_num

    # vendorLine
    attr_accessor :vendor_line

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cost_per_interview' => :'costPerInterview',
        :'cost_per_interview_with_currency' => :'costPerInterviewWithCurrency',
        :'country_iso_code' => :'countryIsoCode',
        :'extendedamount' => :'extendedamount',
        :'guid' => :'guid',
        :'label_for_mobile' => :'labelForMobile',
        :'product_id_guid' => :'productIdGuid',
        :'product_id_name' => :'productIdName',
        :'quantity' => :'quantity',
        :'ssi_additional_points' => :'ssiAdditionalPoints',
        :'ssi_calculated_ir' => :'ssiCalculatedIr',
        :'ssi_calculated_loi' => :'ssiCalculatedLoi',
        :'ssi_charts_num' => :'ssiChartsNum',
        :'ssi_family_id' => :'ssiFamilyId',
        :'ssi_images_num' => :'ssiImagesNum',
        :'ssi_images_special_num' => :'ssiImagesSpecialNum',
        :'ssi_input_price' => :'ssiInputPrice',
        :'ssi_ir' => :'ssiIr',
        :'ssi_label' => :'ssiLabel',
        :'ssi_product_type' => :'ssiProductType',
        :'ssi_product_type_id' => :'ssiProductTypeId',
        :'ssi_sample_country_code' => :'ssiSampleCountryCode',
        :'ssi_sample_country_id' => :'ssiSampleCountryId',
        :'ssi_title' => :'ssiTitle',
        :'ssi_vendor_used' => :'ssiVendorUsed',
        :'ssi_videos_num' => :'ssiVideosNum',
        :'vendor_line' => :'vendorLine'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cost_per_interview' => :'Float',
        :'cost_per_interview_with_currency' => :'String',
        :'country_iso_code' => :'String',
        :'extendedamount' => :'String',
        :'guid' => :'String',
        :'label_for_mobile' => :'String',
        :'product_id_guid' => :'String',
        :'product_id_name' => :'String',
        :'quantity' => :'Integer',
        :'ssi_additional_points' => :'Integer',
        :'ssi_calculated_ir' => :'String',
        :'ssi_calculated_loi' => :'String',
        :'ssi_charts_num' => :'Integer',
        :'ssi_family_id' => :'String',
        :'ssi_images_num' => :'Integer',
        :'ssi_images_special_num' => :'Integer',
        :'ssi_input_price' => :'Float',
        :'ssi_ir' => :'Integer',
        :'ssi_label' => :'String',
        :'ssi_product_type' => :'String',
        :'ssi_product_type_id' => :'Integer',
        :'ssi_sample_country_code' => :'String',
        :'ssi_sample_country_id' => :'String',
        :'ssi_title' => :'String',
        :'ssi_vendor_used' => :'String',
        :'ssi_videos_num' => :'Integer',
        :'vendor_line' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'costPerInterview')
        self.cost_per_interview = attributes[:'costPerInterview']
      end

      if attributes.has_key?(:'costPerInterviewWithCurrency')
        self.cost_per_interview_with_currency = attributes[:'costPerInterviewWithCurrency']
      end

      if attributes.has_key?(:'countryIsoCode')
        self.country_iso_code = attributes[:'countryIsoCode']
      end

      if attributes.has_key?(:'extendedamount')
        self.extendedamount = attributes[:'extendedamount']
      end

      if attributes.has_key?(:'guid')
        self.guid = attributes[:'guid']
      end

      if attributes.has_key?(:'labelForMobile')
        self.label_for_mobile = attributes[:'labelForMobile']
      end

      if attributes.has_key?(:'productIdGuid')
        self.product_id_guid = attributes[:'productIdGuid']
      end

      if attributes.has_key?(:'productIdName')
        self.product_id_name = attributes[:'productIdName']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'ssiAdditionalPoints')
        self.ssi_additional_points = attributes[:'ssiAdditionalPoints']
      end

      if attributes.has_key?(:'ssiCalculatedIr')
        self.ssi_calculated_ir = attributes[:'ssiCalculatedIr']
      end

      if attributes.has_key?(:'ssiCalculatedLoi')
        self.ssi_calculated_loi = attributes[:'ssiCalculatedLoi']
      end

      if attributes.has_key?(:'ssiChartsNum')
        self.ssi_charts_num = attributes[:'ssiChartsNum']
      end

      if attributes.has_key?(:'ssiFamilyId')
        self.ssi_family_id = attributes[:'ssiFamilyId']
      end

      if attributes.has_key?(:'ssiImagesNum')
        self.ssi_images_num = attributes[:'ssiImagesNum']
      end

      if attributes.has_key?(:'ssiImagesSpecialNum')
        self.ssi_images_special_num = attributes[:'ssiImagesSpecialNum']
      end

      if attributes.has_key?(:'ssiInputPrice')
        self.ssi_input_price = attributes[:'ssiInputPrice']
      end

      if attributes.has_key?(:'ssiIr')
        self.ssi_ir = attributes[:'ssiIr']
      end

      if attributes.has_key?(:'ssiLabel')
        self.ssi_label = attributes[:'ssiLabel']
      end

      if attributes.has_key?(:'ssiProductType')
        self.ssi_product_type = attributes[:'ssiProductType']
      end

      if attributes.has_key?(:'ssiProductTypeId')
        self.ssi_product_type_id = attributes[:'ssiProductTypeId']
      end

      if attributes.has_key?(:'ssiSampleCountryCode')
        self.ssi_sample_country_code = attributes[:'ssiSampleCountryCode']
      end

      if attributes.has_key?(:'ssiSampleCountryId')
        self.ssi_sample_country_id = attributes[:'ssiSampleCountryId']
      end

      if attributes.has_key?(:'ssiTitle')
        self.ssi_title = attributes[:'ssiTitle']
      end

      if attributes.has_key?(:'ssiVendorUsed')
        self.ssi_vendor_used = attributes[:'ssiVendorUsed']
      end

      if attributes.has_key?(:'ssiVideosNum')
        self.ssi_videos_num = attributes[:'ssiVideosNum']
      end

      if attributes.has_key?(:'vendorLine')
        self.vendor_line = attributes[:'vendorLine']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @cost_per_interview.nil?
        invalid_properties.push('invalid value for "cost_per_interview", cost_per_interview cannot be nil.')
      end

      if @cost_per_interview_with_currency.nil?
        invalid_properties.push('invalid value for "cost_per_interview_with_currency", cost_per_interview_with_currency cannot be nil.')
      end

      if @country_iso_code.nil?
        invalid_properties.push('invalid value for "country_iso_code", country_iso_code cannot be nil.')
      end

      if @extendedamount.nil?
        invalid_properties.push('invalid value for "extendedamount", extendedamount cannot be nil.')
      end

      if @guid.nil?
        invalid_properties.push('invalid value for "guid", guid cannot be nil.')
      end

      if @label_for_mobile.nil?
        invalid_properties.push('invalid value for "label_for_mobile", label_for_mobile cannot be nil.')
      end

      if @product_id_guid.nil?
        invalid_properties.push('invalid value for "product_id_guid", product_id_guid cannot be nil.')
      end

      if @product_id_name.nil?
        invalid_properties.push('invalid value for "product_id_name", product_id_name cannot be nil.')
      end

      if @quantity.nil?
        invalid_properties.push('invalid value for "quantity", quantity cannot be nil.')
      end

      if @ssi_additional_points.nil?
        invalid_properties.push('invalid value for "ssi_additional_points", ssi_additional_points cannot be nil.')
      end

      if @ssi_calculated_ir.nil?
        invalid_properties.push('invalid value for "ssi_calculated_ir", ssi_calculated_ir cannot be nil.')
      end

      if @ssi_calculated_loi.nil?
        invalid_properties.push('invalid value for "ssi_calculated_loi", ssi_calculated_loi cannot be nil.')
      end

      if @ssi_charts_num.nil?
        invalid_properties.push('invalid value for "ssi_charts_num", ssi_charts_num cannot be nil.')
      end

      if @ssi_family_id.nil?
        invalid_properties.push('invalid value for "ssi_family_id", ssi_family_id cannot be nil.')
      end

      if @ssi_images_num.nil?
        invalid_properties.push('invalid value for "ssi_images_num", ssi_images_num cannot be nil.')
      end

      if @ssi_images_special_num.nil?
        invalid_properties.push('invalid value for "ssi_images_special_num", ssi_images_special_num cannot be nil.')
      end

      if @ssi_input_price.nil?
        invalid_properties.push('invalid value for "ssi_input_price", ssi_input_price cannot be nil.')
      end

      if @ssi_ir.nil?
        invalid_properties.push('invalid value for "ssi_ir", ssi_ir cannot be nil.')
      end

      if @ssi_label.nil?
        invalid_properties.push('invalid value for "ssi_label", ssi_label cannot be nil.')
      end

      if @ssi_product_type.nil?
        invalid_properties.push('invalid value for "ssi_product_type", ssi_product_type cannot be nil.')
      end

      if @ssi_product_type_id.nil?
        invalid_properties.push('invalid value for "ssi_product_type_id", ssi_product_type_id cannot be nil.')
      end

      if @ssi_sample_country_code.nil?
        invalid_properties.push('invalid value for "ssi_sample_country_code", ssi_sample_country_code cannot be nil.')
      end

      if @ssi_sample_country_id.nil?
        invalid_properties.push('invalid value for "ssi_sample_country_id", ssi_sample_country_id cannot be nil.')
      end

      if @ssi_title.nil?
        invalid_properties.push('invalid value for "ssi_title", ssi_title cannot be nil.')
      end

      if @ssi_vendor_used.nil?
        invalid_properties.push('invalid value for "ssi_vendor_used", ssi_vendor_used cannot be nil.')
      end

      if @ssi_videos_num.nil?
        invalid_properties.push('invalid value for "ssi_videos_num", ssi_videos_num cannot be nil.')
      end

      if @vendor_line.nil?
        invalid_properties.push('invalid value for "vendor_line", vendor_line cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cost_per_interview.nil?
      return false if @cost_per_interview_with_currency.nil?
      return false if @country_iso_code.nil?
      return false if @extendedamount.nil?
      return false if @guid.nil?
      return false if @label_for_mobile.nil?
      return false if @product_id_guid.nil?
      return false if @product_id_name.nil?
      return false if @quantity.nil?
      return false if @ssi_additional_points.nil?
      return false if @ssi_calculated_ir.nil?
      return false if @ssi_calculated_loi.nil?
      return false if @ssi_charts_num.nil?
      return false if @ssi_family_id.nil?
      return false if @ssi_images_num.nil?
      return false if @ssi_images_special_num.nil?
      return false if @ssi_input_price.nil?
      return false if @ssi_ir.nil?
      return false if @ssi_label.nil?
      return false if @ssi_product_type.nil?
      return false if @ssi_product_type_id.nil?
      return false if @ssi_sample_country_code.nil?
      return false if @ssi_sample_country_id.nil?
      return false if @ssi_title.nil?
      return false if @ssi_vendor_used.nil?
      return false if @ssi_videos_num.nil?
      return false if @vendor_line.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cost_per_interview == o.cost_per_interview &&
          cost_per_interview_with_currency == o.cost_per_interview_with_currency &&
          country_iso_code == o.country_iso_code &&
          extendedamount == o.extendedamount &&
          guid == o.guid &&
          label_for_mobile == o.label_for_mobile &&
          product_id_guid == o.product_id_guid &&
          product_id_name == o.product_id_name &&
          quantity == o.quantity &&
          ssi_additional_points == o.ssi_additional_points &&
          ssi_calculated_ir == o.ssi_calculated_ir &&
          ssi_calculated_loi == o.ssi_calculated_loi &&
          ssi_charts_num == o.ssi_charts_num &&
          ssi_family_id == o.ssi_family_id &&
          ssi_images_num == o.ssi_images_num &&
          ssi_images_special_num == o.ssi_images_special_num &&
          ssi_input_price == o.ssi_input_price &&
          ssi_ir == o.ssi_ir &&
          ssi_label == o.ssi_label &&
          ssi_product_type == o.ssi_product_type &&
          ssi_product_type_id == o.ssi_product_type_id &&
          ssi_sample_country_code == o.ssi_sample_country_code &&
          ssi_sample_country_id == o.ssi_sample_country_id &&
          ssi_title == o.ssi_title &&
          ssi_vendor_used == o.ssi_vendor_used &&
          ssi_videos_num == o.ssi_videos_num &&
          vendor_line == o.vendor_line
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cost_per_interview, cost_per_interview_with_currency, country_iso_code, extendedamount, guid, label_for_mobile, product_id_guid, product_id_name, quantity, ssi_additional_points, ssi_calculated_ir, ssi_calculated_loi, ssi_charts_num, ssi_family_id, ssi_images_num, ssi_images_special_num, ssi_input_price, ssi_ir, ssi_label, ssi_product_type, ssi_product_type_id, ssi_sample_country_code, ssi_sample_country_id, ssi_title, ssi_vendor_used, ssi_videos_num, vendor_line].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SamplifyAPIClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SamplifyAPIClient
  class SalesOrder
    # basicSecurityKey
    attr_accessor :basic_security_key

    # Unique guid
    attr_accessor :guid

    # highSecurityKey
    attr_accessor :high_security_key

    # name
    attr_accessor :name

    # noCharge
    attr_accessor :no_charge

    # orderType
    attr_accessor :order_type

    # ordernumber
    attr_accessor :ordernumber

    # relatedOrderCpi
    attr_accessor :related_order_cpi

    # secureEndLinkLevel
    attr_accessor :secure_end_link_level

    # secureEndLinkLevelName
    attr_accessor :secure_end_link_level_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'basic_security_key' => :'basicSecurityKey',
        :'guid' => :'guid',
        :'high_security_key' => :'highSecurityKey',
        :'name' => :'name',
        :'no_charge' => :'noCharge',
        :'order_type' => :'orderType',
        :'ordernumber' => :'ordernumber',
        :'related_order_cpi' => :'relatedOrderCpi',
        :'secure_end_link_level' => :'secureEndLinkLevel',
        :'secure_end_link_level_name' => :'secureEndLinkLevelName'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'basic_security_key' => :'String',
        :'guid' => :'String',
        :'high_security_key' => :'String',
        :'name' => :'String',
        :'no_charge' => :'BOOLEAN',
        :'order_type' => :'String',
        :'ordernumber' => :'String',
        :'related_order_cpi' => :'Float',
        :'secure_end_link_level' => :'Integer',
        :'secure_end_link_level_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'basicSecurityKey')
        self.basic_security_key = attributes[:'basicSecurityKey']
      end

      if attributes.has_key?(:'guid')
        self.guid = attributes[:'guid']
      end

      if attributes.has_key?(:'highSecurityKey')
        self.high_security_key = attributes[:'highSecurityKey']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'noCharge')
        self.no_charge = attributes[:'noCharge']
      end

      if attributes.has_key?(:'orderType')
        self.order_type = attributes[:'orderType']
      end

      if attributes.has_key?(:'ordernumber')
        self.ordernumber = attributes[:'ordernumber']
      end

      if attributes.has_key?(:'relatedOrderCpi')
        self.related_order_cpi = attributes[:'relatedOrderCpi']
      end

      if attributes.has_key?(:'secureEndLinkLevel')
        self.secure_end_link_level = attributes[:'secureEndLinkLevel']
      end

      if attributes.has_key?(:'secureEndLinkLevelName')
        self.secure_end_link_level_name = attributes[:'secureEndLinkLevelName']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @basic_security_key.nil?
        invalid_properties.push('invalid value for "basic_security_key", basic_security_key cannot be nil.')
      end

      if @guid.nil?
        invalid_properties.push('invalid value for "guid", guid cannot be nil.')
      end

      if @high_security_key.nil?
        invalid_properties.push('invalid value for "high_security_key", high_security_key cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @no_charge.nil?
        invalid_properties.push('invalid value for "no_charge", no_charge cannot be nil.')
      end

      if @order_type.nil?
        invalid_properties.push('invalid value for "order_type", order_type cannot be nil.')
      end

      if @ordernumber.nil?
        invalid_properties.push('invalid value for "ordernumber", ordernumber cannot be nil.')
      end

      if @related_order_cpi.nil?
        invalid_properties.push('invalid value for "related_order_cpi", related_order_cpi cannot be nil.')
      end

      if @secure_end_link_level.nil?
        invalid_properties.push('invalid value for "secure_end_link_level", secure_end_link_level cannot be nil.')
      end

      if @secure_end_link_level_name.nil?
        invalid_properties.push('invalid value for "secure_end_link_level_name", secure_end_link_level_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @basic_security_key.nil?
      return false if @guid.nil?
      return false if @high_security_key.nil?
      return false if @name.nil?
      return false if @no_charge.nil?
      return false if @order_type.nil?
      return false if @ordernumber.nil?
      return false if @related_order_cpi.nil?
      return false if @secure_end_link_level.nil?
      return false if @secure_end_link_level_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          basic_security_key == o.basic_security_key &&
          guid == o.guid &&
          high_security_key == o.high_security_key &&
          name == o.name &&
          no_charge == o.no_charge &&
          order_type == o.order_type &&
          ordernumber == o.ordernumber &&
          related_order_cpi == o.related_order_cpi &&
          secure_end_link_level == o.secure_end_link_level &&
          secure_end_link_level_name == o.secure_end_link_level_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [basic_security_key, guid, high_security_key, name, no_charge, order_type, ordernumber, related_order_cpi, secure_end_link_level, secure_end_link_level_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SamplifyAPIClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end

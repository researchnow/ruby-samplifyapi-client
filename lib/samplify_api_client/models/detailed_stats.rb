=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SamplifyAPIClient
  class DetailedStats
    # Calculated median length of interview from actual panelists
    attr_accessor :actual_median_loi

    # Total number of panelists that entered the project
    attr_accessor :attempts

    # Total number of panelists that completed the project
    attr_accessor :completes

    # Total number of panelists that refused to complete the project
    attr_accessor :completes_refused

    # Percentage of completes refused over attempts.
    attr_accessor :completes_refused_percentage

    # Ratio of completes over attempts. (ranges from 0-1)
    attr_accessor :conversion

    # Incidence rate
    attr_accessor :incidence_rate

    # Total number of panelists that dropped the project
    attr_accessor :incompletes

    # Percentage of incompletes over attempts.
    attr_accessor :incompletes_percentage

    # Last accepted incidence rate
    attr_accessor :last_accepted_incidence_rate

    # Last accepted length of interview
    attr_accessor :last_accepted_loi

    # Total number of panelists that triggered an overquota for the project
    attr_accessor :overquotas

    # Percentage of overquotas over attempts.
    attr_accessor :overquotas_percentage

    # Total remaining completes for the project
    attr_accessor :remaining_completes

    # Total number of panelists that got screened out of the project
    attr_accessor :screenouts

    # Percentage of screenouts over attempts.
    attr_accessor :screenouts_percentage

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actual_median_loi' => :'actualMedianLOI',
        :'attempts' => :'attempts',
        :'completes' => :'completes',
        :'completes_refused' => :'completesRefused',
        :'completes_refused_percentage' => :'completesRefusedPercentage',
        :'conversion' => :'conversion',
        :'incidence_rate' => :'incidenceRate',
        :'incompletes' => :'incompletes',
        :'incompletes_percentage' => :'incompletesPercentage',
        :'last_accepted_incidence_rate' => :'lastAcceptedIncidenceRate',
        :'last_accepted_loi' => :'lastAcceptedLOI',
        :'overquotas' => :'overquotas',
        :'overquotas_percentage' => :'overquotasPercentage',
        :'remaining_completes' => :'remainingCompletes',
        :'screenouts' => :'screenouts',
        :'screenouts_percentage' => :'screenoutsPercentage'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'actual_median_loi' => :'Integer',
        :'attempts' => :'Integer',
        :'completes' => :'Integer',
        :'completes_refused' => :'Integer',
        :'completes_refused_percentage' => :'Float',
        :'conversion' => :'Float',
        :'incidence_rate' => :'Float',
        :'incompletes' => :'Integer',
        :'incompletes_percentage' => :'Float',
        :'last_accepted_incidence_rate' => :'Float',
        :'last_accepted_loi' => :'Integer',
        :'overquotas' => :'Integer',
        :'overquotas_percentage' => :'Float',
        :'remaining_completes' => :'Integer',
        :'screenouts' => :'Integer',
        :'screenouts_percentage' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'actualMedianLOI')
        self.actual_median_loi = attributes[:'actualMedianLOI']
      end

      if attributes.has_key?(:'attempts')
        self.attempts = attributes[:'attempts']
      end

      if attributes.has_key?(:'completes')
        self.completes = attributes[:'completes']
      end

      if attributes.has_key?(:'completesRefused')
        self.completes_refused = attributes[:'completesRefused']
      end

      if attributes.has_key?(:'completesRefusedPercentage')
        self.completes_refused_percentage = attributes[:'completesRefusedPercentage']
      end

      if attributes.has_key?(:'conversion')
        self.conversion = attributes[:'conversion']
      end

      if attributes.has_key?(:'incidenceRate')
        self.incidence_rate = attributes[:'incidenceRate']
      end

      if attributes.has_key?(:'incompletes')
        self.incompletes = attributes[:'incompletes']
      end

      if attributes.has_key?(:'incompletesPercentage')
        self.incompletes_percentage = attributes[:'incompletesPercentage']
      end

      if attributes.has_key?(:'lastAcceptedIncidenceRate')
        self.last_accepted_incidence_rate = attributes[:'lastAcceptedIncidenceRate']
      end

      if attributes.has_key?(:'lastAcceptedLOI')
        self.last_accepted_loi = attributes[:'lastAcceptedLOI']
      end

      if attributes.has_key?(:'overquotas')
        self.overquotas = attributes[:'overquotas']
      end

      if attributes.has_key?(:'overquotasPercentage')
        self.overquotas_percentage = attributes[:'overquotasPercentage']
      end

      if attributes.has_key?(:'remainingCompletes')
        self.remaining_completes = attributes[:'remainingCompletes']
      end

      if attributes.has_key?(:'screenouts')
        self.screenouts = attributes[:'screenouts']
      end

      if attributes.has_key?(:'screenoutsPercentage')
        self.screenouts_percentage = attributes[:'screenoutsPercentage']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @attempts.nil?
        invalid_properties.push('invalid value for "attempts", attempts cannot be nil.')
      end

      if @completes.nil?
        invalid_properties.push('invalid value for "completes", completes cannot be nil.')
      end

      if @completes_refused.nil?
        invalid_properties.push('invalid value for "completes_refused", completes_refused cannot be nil.')
      end

      if @completes_refused_percentage.nil?
        invalid_properties.push('invalid value for "completes_refused_percentage", completes_refused_percentage cannot be nil.')
      end

      if @conversion.nil?
        invalid_properties.push('invalid value for "conversion", conversion cannot be nil.')
      end

      if @incidence_rate.nil?
        invalid_properties.push('invalid value for "incidence_rate", incidence_rate cannot be nil.')
      end

      if @incompletes.nil?
        invalid_properties.push('invalid value for "incompletes", incompletes cannot be nil.')
      end

      if @incompletes_percentage.nil?
        invalid_properties.push('invalid value for "incompletes_percentage", incompletes_percentage cannot be nil.')
      end

      if @overquotas.nil?
        invalid_properties.push('invalid value for "overquotas", overquotas cannot be nil.')
      end

      if @overquotas_percentage.nil?
        invalid_properties.push('invalid value for "overquotas_percentage", overquotas_percentage cannot be nil.')
      end

      if @remaining_completes.nil?
        invalid_properties.push('invalid value for "remaining_completes", remaining_completes cannot be nil.')
      end

      if @screenouts.nil?
        invalid_properties.push('invalid value for "screenouts", screenouts cannot be nil.')
      end

      if @screenouts_percentage.nil?
        invalid_properties.push('invalid value for "screenouts_percentage", screenouts_percentage cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @attempts.nil?
      return false if @completes.nil?
      return false if @completes_refused.nil?
      return false if @completes_refused_percentage.nil?
      return false if @conversion.nil?
      return false if @incidence_rate.nil?
      return false if @incompletes.nil?
      return false if @incompletes_percentage.nil?
      return false if @overquotas.nil?
      return false if @overquotas_percentage.nil?
      return false if @remaining_completes.nil?
      return false if @screenouts.nil?
      return false if @screenouts_percentage.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actual_median_loi == o.actual_median_loi &&
          attempts == o.attempts &&
          completes == o.completes &&
          completes_refused == o.completes_refused &&
          completes_refused_percentage == o.completes_refused_percentage &&
          conversion == o.conversion &&
          incidence_rate == o.incidence_rate &&
          incompletes == o.incompletes &&
          incompletes_percentage == o.incompletes_percentage &&
          last_accepted_incidence_rate == o.last_accepted_incidence_rate &&
          last_accepted_loi == o.last_accepted_loi &&
          overquotas == o.overquotas &&
          overquotas_percentage == o.overquotas_percentage &&
          remaining_completes == o.remaining_completes &&
          screenouts == o.screenouts &&
          screenouts_percentage == o.screenouts_percentage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [actual_median_loi, attempts, completes, completes_refused, completes_refused_percentage, conversion, incidence_rate, incompletes, incompletes_percentage, last_accepted_incidence_rate, last_accepted_loi, overquotas, overquotas_percentage, remaining_completes, screenouts, screenouts_percentage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SamplifyAPIClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

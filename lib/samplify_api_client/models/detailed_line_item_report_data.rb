=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module SamplifyAPIClient
  class DetailedLineItemReportData
    attr_accessor :cost

    # ISO country code
    attr_accessor :country_iso_code

    # A unique identifier for your Line Item
    attr_accessor :ext_line_item_id

    # ISO language code
    attr_accessor :language_iso_code

    # quota group report details for the lineitem
    attr_accessor :quota_groups

    # id of the source where is the sample coming from
    attr_accessor :sources

    # The current state of the project: PROVISIONED, LAUNCHED, PAUSED, CLOSED
    attr_accessor :state

    # The current state reason of the project
    attr_accessor :state_reason

    attr_accessor :stats

    # LineItem title
    attr_accessor :title

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cost' => :'cost',
        :'country_iso_code' => :'countryISOCode',
        :'ext_line_item_id' => :'extLineItemId',
        :'language_iso_code' => :'languageISOCode',
        :'quota_groups' => :'quotaGroups',
        :'sources' => :'sources',
        :'state' => :'state',
        :'state_reason' => :'stateReason',
        :'stats' => :'stats',
        :'title' => :'title'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cost' => :'Cost',
        :'country_iso_code' => :'String',
        :'ext_line_item_id' => :'String',
        :'language_iso_code' => :'String',
        :'quota_groups' => :'Array<DetailedQuotaGroupReportData>',
        :'sources' => :'Array<LineItemSource>',
        :'state' => :'String',
        :'state_reason' => :'String',
        :'stats' => :'DetailedStats',
        :'title' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.has_key?(:'countryISOCode')
        self.country_iso_code = attributes[:'countryISOCode']
      end

      if attributes.has_key?(:'extLineItemId')
        self.ext_line_item_id = attributes[:'extLineItemId']
      end

      if attributes.has_key?(:'languageISOCode')
        self.language_iso_code = attributes[:'languageISOCode']
      end

      if attributes.has_key?(:'quotaGroups')
        if (value = attributes[:'quotaGroups']).is_a?(Array)
          self.quota_groups = value
        end
      end

      if attributes.has_key?(:'sources')
        if (value = attributes[:'sources']).is_a?(Array)
          self.sources = value
        end
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'stateReason')
        self.state_reason = attributes[:'stateReason']
      end

      if attributes.has_key?(:'stats')
        self.stats = attributes[:'stats']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @cost.nil?
        invalid_properties.push('invalid value for "cost", cost cannot be nil.')
      end

      if @country_iso_code.nil?
        invalid_properties.push('invalid value for "country_iso_code", country_iso_code cannot be nil.')
      end

      if @ext_line_item_id.nil?
        invalid_properties.push('invalid value for "ext_line_item_id", ext_line_item_id cannot be nil.')
      end

      if @language_iso_code.nil?
        invalid_properties.push('invalid value for "language_iso_code", language_iso_code cannot be nil.')
      end

      if @sources.nil?
        invalid_properties.push('invalid value for "sources", sources cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @state_reason.nil?
        invalid_properties.push('invalid value for "state_reason", state_reason cannot be nil.')
      end

      if @stats.nil?
        invalid_properties.push('invalid value for "stats", stats cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cost.nil?
      return false if @country_iso_code.nil?
      return false if @ext_line_item_id.nil?
      return false if @language_iso_code.nil?
      return false if @sources.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ['PROVISIONED', 'AWAITING_APPROVAL', 'AWAITING_CLIENT_APPROVAL', 'QA_APPROVED', 'LAUNCHED', 'PAUSED', 'CLOSED', 'INVOICED', 'CANCELLED', 'REJECTED'])
      return false unless state_validator.valid?(@state)
      return false if @state_reason.nil?
      return false if @stats.nil?
      return false if @title.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['PROVISIONED', 'AWAITING_APPROVAL', 'AWAITING_CLIENT_APPROVAL', 'QA_APPROVED', 'LAUNCHED', 'PAUSED', 'CLOSED', 'INVOICED', 'CANCELLED', 'REJECTED'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cost == o.cost &&
          country_iso_code == o.country_iso_code &&
          ext_line_item_id == o.ext_line_item_id &&
          language_iso_code == o.language_iso_code &&
          quota_groups == o.quota_groups &&
          sources == o.sources &&
          state == o.state &&
          state_reason == o.state_reason &&
          stats == o.stats &&
          title == o.title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cost, country_iso_code, ext_line_item_id, language_iso_code, quota_groups, sources, state, state_reason, stats, title].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SamplifyAPIClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end

=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'uri'

module SamplifyAPIClient
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # buy projects
    # @param ext_project_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [BuyProject]
    def projects_buy(ext_project_id, payload, opts = {})
      data, _status_code, _headers = projects_buy_with_http_info(ext_project_id, payload, opts)
      data
    end

    # buy projects
    # @param ext_project_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BuyProject, Fixnum, Hash)>] BuyProject data, response status code and response headers
    def projects_buy_with_http_info(ext_project_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_buy ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_buy"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProjectsApi.projects_buy"
      end
      # resource path
      local_var_path = '/sample/v1/projects/{extProjectId}/buy'.sub('{' + 'extProjectId' + '}', ext_project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.buyproject+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BuyProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_buy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # close projects
    # @param ext_project_id 
    # @param [Hash] opts the optional parameters
    # @return [ProjectAction]
    def projects_close(ext_project_id, opts = {})
      data, _status_code, _headers = projects_close_with_http_info(ext_project_id, opts)
      data
    end

    # close projects
    # @param ext_project_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectAction, Fixnum, Hash)>] ProjectAction data, response status code and response headers
    def projects_close_with_http_info(ext_project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_close ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_close"
      end
      # resource path
      local_var_path = '/sample/v1/projects/{extProjectId}/close'.sub('{' + 'extProjectId' + '}', ext_project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.project.action+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectAction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_close\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create projects
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [ProjectResponse]
    def projects_create(payload, opts = {})
      data, _status_code, _headers = projects_create_with_http_info(payload, opts)
      data
    end

    # create projects
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectResponse, Fixnum, Hash)>] ProjectResponse data, response status code and response headers
    def projects_create_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_create ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProjectsApi.projects_create"
      end
      # resource path
      local_var_path = '/sample/v1/projects'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.create+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get projects
    # @param ext_project_id 
    # @param [Hash] opts the optional parameters
    # @return [ProjectResponse]
    def projects_get(ext_project_id, opts = {})
      data, _status_code, _headers = projects_get_with_http_info(ext_project_id, opts)
      data
    end

    # get projects
    # @param ext_project_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectResponse, Fixnum, Hash)>] ProjectResponse data, response status code and response headers
    def projects_get_with_http_info(ext_project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_get"
      end
      # resource path
      local_var_path = '/sample/v1/projects/{extProjectId}'.sub('{' + 'extProjectId' + '}', ext_project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.app.error+json', 'application/vnd.create+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getReport projects
    # @param ext_project_id 
    # @param [Hash] opts the optional parameters
    # @return [ProjectReport]
    def projects_get_report(ext_project_id, opts = {})
      data, _status_code, _headers = projects_get_report_with_http_info(ext_project_id, opts)
      data
    end

    # getReport projects
    # @param ext_project_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectReport, Fixnum, Hash)>] ProjectReport data, response status code and response headers
    def projects_get_report_with_http_info(ext_project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get_report ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_get_report"
      end
      # resource path
      local_var_path = '/sample/v1/projects/{extProjectId}/report'.sub('{' + 'extProjectId' + '}', ext_project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.projects.report+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getReports projects
    # @param ext_project_id Only return project with the given external project ID
    # @param [Hash] opts the optional parameters
    # @return [ProjectReports]
    def projects_get_reports(ext_project_id, opts = {})
      data, _status_code, _headers = projects_get_reports_with_http_info(ext_project_id, opts)
      data
    end

    # getReports projects
    # @param ext_project_id Only return project with the given external project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectReports, Fixnum, Hash)>] ProjectReports data, response status code and response headers
    def projects_get_reports_with_http_info(ext_project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get_reports ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_get_reports"
      end
      # resource path
      local_var_path = '/sample/v1/projects/report'

      # query parameters
      query_params = {}
      query_params[:'extProjectId'] = ext_project_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.projects.reports+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectReports')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getSurveyEndLinks projects
    # @param ext_project_id 
    # @param survey_id 
    # @param [Hash] opts the optional parameters
    # @return [ProjectSurveyEndLinks]
    def projects_get_survey_end_links(ext_project_id, survey_id, opts = {})
      data, _status_code, _headers = projects_get_survey_end_links_with_http_info(ext_project_id, survey_id, opts)
      data
    end

    # getSurveyEndLinks projects
    # @param ext_project_id 
    # @param survey_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectSurveyEndLinks, Fixnum, Hash)>] ProjectSurveyEndLinks data, response status code and response headers
    def projects_get_survey_end_links_with_http_info(ext_project_id, survey_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get_survey_end_links ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_get_survey_end_links"
      end
      # verify the required parameter 'survey_id' is set
      if @api_client.config.client_side_validation && survey_id.nil?
        fail ArgumentError, "Missing the required parameter 'survey_id' when calling ProjectsApi.projects_get_survey_end_links"
      end
      # resource path
      local_var_path = '/sample/v1/projects/{extProjectId}/surveys/{surveyId}/links'.sub('{' + 'extProjectId' + '}', ext_project_id.to_s).sub('{' + 'surveyId' + '}', survey_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.projects.survey.endlinks+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectSurveyEndLinks')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get_survey_end_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # invoices projects
    # @param ext_project_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def projects_invoices(ext_project_id, opts = {})
      projects_invoices_with_http_info(ext_project_id, opts)
      nil
    end

    # invoices projects
    # @param ext_project_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def projects_invoices_with_http_info(ext_project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_invoices ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_invoices"
      end
      # resource path
      local_var_path = '/sample/v1/projects/{extProjectId}/invoices'.sub('{' + 'extProjectId' + '}', ext_project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.app.error+json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # list projects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_at return projects with createdAt start date
    # @option opts [String] :ext_project_id Only return project with the given external project id
    # @option opts [String] :job_number Only return projects with the given job number
    # @option opts [Integer] :limit Maximum number of projects to return (default to 10)
    # @option opts [Integer] :offset The first zero-based offset project to return (default to 0)
    # @option opts [String] :scope Only return projects within the given scope
    # @option opts [Array<String>] :sort Sort the projects by the given key(s)
    # @option opts [String] :state Only return projects with the given state
    # @option opts [String] :title Only return projects with the given title
    # @return [Projects]
    def projects_list(opts = {})
      data, _status_code, _headers = projects_list_with_http_info(opts)
      data
    end

    # list projects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_at return projects with createdAt start date
    # @option opts [String] :ext_project_id Only return project with the given external project id
    # @option opts [String] :job_number Only return projects with the given job number
    # @option opts [Integer] :limit Maximum number of projects to return
    # @option opts [Integer] :offset The first zero-based offset project to return
    # @option opts [String] :scope Only return projects within the given scope
    # @option opts [Array<String>] :sort Sort the projects by the given key(s)
    # @option opts [String] :state Only return projects with the given state
    # @option opts [String] :title Only return projects with the given title
    # @return [Array<(Projects, Fixnum, Hash)>] Projects data, response status code and response headers
    def projects_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.projects_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.projects_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProjectsApi.projects_list, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'scope'] && !['application', 'user'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of application, user'
      end
      # resource path
      local_var_path = '/sample/v1/projects'

      # query parameters
      query_params = {}
      query_params[:'createdAt'] = opts[:'created_at'] if !opts[:'created_at'].nil?
      query_params[:'extProjectId'] = opts[:'ext_project_id'] if !opts[:'ext_project_id'].nil?
      query_params[:'jobNumber'] = opts[:'job_number'] if !opts[:'job_number'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.projects+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Projects')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # reconcile projects
    # @param ext_project_id 
    # @param file File
    # @param message Message
    # @param [Hash] opts the optional parameters
    # @return [Reconcile]
    def projects_reconcile(ext_project_id, file, message, opts = {})
      data, _status_code, _headers = projects_reconcile_with_http_info(ext_project_id, file, message, opts)
      data
    end

    # reconcile projects
    # @param ext_project_id 
    # @param file File
    # @param message Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reconcile, Fixnum, Hash)>] Reconcile data, response status code and response headers
    def projects_reconcile_with_http_info(ext_project_id, file, message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_reconcile ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_reconcile"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ProjectsApi.projects_reconcile"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling ProjectsApi.projects_reconcile"
      end
      # resource path
      local_var_path = '/sample/v1/projects/{extProjectId}/reconcile'.sub('{' + 'extProjectId' + '}', ext_project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.app.error+json', 'application/vnd.projects.reconcile+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file
      form_params['message'] = message

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Reconcile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_reconcile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update projects
    # @param ext_project_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [ProjectResponse]
    def projects_update(ext_project_id, payload, opts = {})
      data, _status_code, _headers = projects_update_with_http_info(ext_project_id, payload, opts)
      data
    end

    # update projects
    # @param ext_project_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectResponse, Fixnum, Hash)>] ProjectResponse data, response status code and response headers
    def projects_update_with_http_info(ext_project_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_update ...'
      end
      # verify the required parameter 'ext_project_id' is set
      if @api_client.config.client_side_validation && ext_project_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_project_id' when calling ProjectsApi.projects_update"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProjectsApi.projects_update"
      end
      # resource path
      local_var_path = '/sample/v1/projects/{extProjectId}'.sub('{' + 'extProjectId' + '}', ext_project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.create+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

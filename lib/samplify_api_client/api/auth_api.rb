=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module SamplifyAPIClient
  class AuthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # code auth
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [TokenMedia]
    def auth_code(payload, opts = {})
      data, _status_code, _headers = auth_code_with_http_info(payload, opts)
      data
    end

    # code auth
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenMedia, Fixnum, Hash)>] TokenMedia data, response status code and response headers
    def auth_code_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.auth_code ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling AuthApi.auth_code"
      end
      # resource path
      local_var_path = '/auth/v1/token/code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.auth.error+json', 'application/vnd.token+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenMedia')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#auth_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # logout auth
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_logout(payload, opts = {})
      auth_logout_with_http_info(payload, opts)
      nil
    end

    # logout auth
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auth_logout_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.auth_logout ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling AuthApi.auth_logout"
      end
      # resource path
      local_var_path = '/auth/v1/logout'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.auth.error+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#auth_logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # password auth
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [TokenMedia]
    def auth_password(payload, opts = {})
      data, _status_code, _headers = auth_password_with_http_info(payload, opts)
      data
    end

    # password auth
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenMedia, Fixnum, Hash)>] TokenMedia data, response status code and response headers
    def auth_password_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.auth_password ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling AuthApi.auth_password"
      end
      # resource path
      local_var_path = '/auth/v1/token/password'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.auth.error+json', 'application/vnd.token+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenMedia')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#auth_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # refresh auth
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [TokenMedia]
    def auth_refresh(payload, opts = {})
      data, _status_code, _headers = auth_refresh_with_http_info(payload, opts)
      data
    end

    # refresh auth
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenMedia, Fixnum, Hash)>] TokenMedia data, response status code and response headers
    def auth_refresh_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.auth_refresh ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling AuthApi.auth_refresh"
      end
      # resource path
      local_var_path = '/auth/v1/token/refresh'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.auth.error+json', 'application/vnd.token+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenMedia')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#auth_refresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

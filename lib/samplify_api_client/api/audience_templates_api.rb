=begin
#Samplify API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module SamplifyAPIClient
  class AudienceTemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create audienceTemplates
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def audience_templates_create(payload, opts = {})
      data, _status_code, _headers = audience_templates_create_with_http_info(payload, opts)
      data
    end

    # create audienceTemplates
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Fixnum, Hash)>] Template data, response status code and response headers
    def audience_templates_create_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AudienceTemplatesApi.audience_templates_create ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling AudienceTemplatesApi.audience_templates_create"
      end
      # resource path
      local_var_path = '/sample/v1/templates/quotaPlan'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.app.error+json', 'application/vnd.template+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Template')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AudienceTemplatesApi#audience_templates_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # delete audienceTemplates
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [AppError]
    def audience_templates_delete(template_id, opts = {})
      data, _status_code, _headers = audience_templates_delete_with_http_info(template_id, opts)
      data
    end

    # delete audienceTemplates
    # @param template_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppError, Fixnum, Hash)>] AppError data, response status code and response headers
    def audience_templates_delete_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AudienceTemplatesApi.audience_templates_delete ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling AudienceTemplatesApi.audience_templates_delete"
      end
      # resource path
      local_var_path = '/sample/v1/templates/quotaPlan/{templateId}'.sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.app.error+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AppError')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AudienceTemplatesApi#audience_templates_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # list audienceTemplates
    # @param country_iso_code 
    # @param language_iso_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_at return templates with createdAt date range
    # @option opts [BOOLEAN] :editable return templates with the given value for editable flag
    # @option opts [String] :id Only return template with the given id
    # @option opts [Integer] :limit Maximum number of templates to return (default to 10)
    # @option opts [String] :name Only return templates matching the given name
    # @option opts [Integer] :offset The first zero-based offset template to return (default to 0)
    # @option opts [Array<String>] :sort Sort the templates by the given key(s)
    # @option opts [String] :state Only return templates with the given state
    # @option opts [String] :tags return templates with the given tags
    # @option opts [String] :updated_at return templates with updatedAt date range
    # @return [Templates]
    def audience_templates_list(country_iso_code, language_iso_code, opts = {})
      data, _status_code, _headers = audience_templates_list_with_http_info(country_iso_code, language_iso_code, opts)
      data
    end

    # list audienceTemplates
    # @param country_iso_code 
    # @param language_iso_code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_at return templates with createdAt date range
    # @option opts [BOOLEAN] :editable return templates with the given value for editable flag
    # @option opts [String] :id Only return template with the given id
    # @option opts [Integer] :limit Maximum number of templates to return
    # @option opts [String] :name Only return templates matching the given name
    # @option opts [Integer] :offset The first zero-based offset template to return
    # @option opts [Array<String>] :sort Sort the templates by the given key(s)
    # @option opts [String] :state Only return templates with the given state
    # @option opts [String] :tags return templates with the given tags
    # @option opts [String] :updated_at return templates with updatedAt date range
    # @return [Array<(Templates, Fixnum, Hash)>] Templates data, response status code and response headers
    def audience_templates_list_with_http_info(country_iso_code, language_iso_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AudienceTemplatesApi.audience_templates_list ...'
      end
      # verify the required parameter 'country_iso_code' is set
      if @api_client.config.client_side_validation && country_iso_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso_code' when calling AudienceTemplatesApi.audience_templates_list"
      end
      # verify the required parameter 'language_iso_code' is set
      if @api_client.config.client_side_validation && language_iso_code.nil?
        fail ArgumentError, "Missing the required parameter 'language_iso_code' when calling AudienceTemplatesApi.audience_templates_list"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AudienceTemplatesApi.audience_templates_list, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AudienceTemplatesApi.audience_templates_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AudienceTemplatesApi.audience_templates_list, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/sample/v1/templates/quotaPlan/{countryIsoCode}/{languageIsoCode}'.sub('{' + 'countryIsoCode' + '}', country_iso_code.to_s).sub('{' + 'languageIsoCode' + '}', language_iso_code.to_s)

      # query parameters
      query_params = {}
      query_params[:'createdAt'] = opts[:'created_at'] if !opts[:'created_at'].nil?
      query_params[:'editable'] = opts[:'editable'] if !opts[:'editable'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'updatedAt'] = opts[:'updated_at'] if !opts[:'updated_at'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.app.error+json', 'application/vnd.templates+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Templates')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AudienceTemplatesApi#audience_templates_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update audienceTemplates
    # @param template_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def audience_templates_update(template_id, payload, opts = {})
      data, _status_code, _headers = audience_templates_update_with_http_info(template_id, payload, opts)
      data
    end

    # update audienceTemplates
    # @param template_id 
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Fixnum, Hash)>] Template data, response status code and response headers
    def audience_templates_update_with_http_info(template_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AudienceTemplatesApi.audience_templates_update ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling AudienceTemplatesApi.audience_templates_update"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling AudienceTemplatesApi.audience_templates_update"
      end
      # resource path
      local_var_path = '/sample/v1/templates/quotaPlan/{templateId}'.sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.app.error+json', 'application/vnd.template+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Template')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AudienceTemplatesApi#audience_templates_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
